(function() {

    module( 'Diff Sync integration test' );


    // asyncTest( 'patch - simulate a sync update/patch', function () {
    //     var documentId = uuid();
    //     var clientId = "client1";
    //     var addDocument = { msgType: 'add', id: documentId, clientId: clientId, content: 'Do or do not, there is no try.' };
    //     // the clients diffs would be generated by the client side JS library.
    //     var clientEdits = {
    //         msgType: 'patch',
    //         id: documentId,
    //         clientId: clientId,
    //         edits: [{
    //             clientVersion: 0,
    //             serverVersion: 0,
    //             checksum: '',
    //             diffs: [{operation: 'UNCHANGED', text: 'Do or do not, there is no try'},{operation: 'DELETE', text: '.'},{operation: 'ADD', text: '!'}]
    //         }]};
    //     var url = 'ws://localhost:7777/sync';
    //     var ws = new WebSocket(url);
    //     var ws2 = new WebSocket(url);

    //     ws.onopen = function( evt ) {
    //         ws.send( JSON.stringify ( addDocument ) );
    //     };

    //     ws2.onopen = function( evt ) {
    //         addDocument.clientId = "client2";
    //         delete addDocument.content;
    //         ws2.send( JSON.stringify ( addDocument ) );
    //     };

    //     var counter1 = 0;
    //     ws.onmessage = function( evt ) {
    //         var json = JSON.parse( evt.data );
    //         switch ( counter1 ) {
    //             case 0:
    //                 equal( json.msgType, 'patch', 'A patch should return a patch message type' );
    //                 equal( json.edits[0].diffs[0].operation, 'UNCHANGED', 'The client that sent the patch msg should also recieve a patch back.' );
    //                 break;
    //             case 1:
    //                 equal( json.msgType, 'patch', 'A patch should return a patch message type' );
    //                 equal( json.edits[0].diffs[0].operation, 'UNCHANGED', 'The client that sent the patch msg should also recieve a patch back.' );
    //                 break;
    //                 start();
    //         }
    //         counter1++;
    //     };

    //     var counter2 = 0;
    //     ws2.onmessage = function( evt ) {
    //         var json = JSON.parse( evt.data );
    //         switch ( counter2 ) {
    //             case 0:
    //                 equal( json.msgType, 'patch', 'A patch should return a patch message type' );
    //                 equal( json.clientId, 'client2', 'The clientId should be client2' );
    //                 equal( json.edits[0].clientVersion, -1, 'The clientVersion should be -1 indicating that the document was seeded by a different client.' );
    //                 equal( json.edits[0].diffs[0].operation, 'UNCHANGED', 'The client that sent the patch msg should also recieve a patch back.' );
    //                 equal( json.edits[0].diffs[0].text, 'Do or do not, there is no try.', 'The text should match the base document version.' );
    //                 ws.send( JSON.stringify ( clientEdits ) );
    //                 break;
    //             case 1:
    //                 equal( json.msgType, 'patch', 'The server should have generated an edit' );
    //                 equal( json.id, documentId, 'The document id should match' );
    //                 equal( json.clientId, 'client2', 'The clientId should match. This is who made the update.' );
    //                 equal( json.edits[0].clientVersion, 0, 'Version of the server document recieved.' );
    //                 equal( json.edits[0].serverVersion, 0, 'Version of the server document recieved.' );
    //                 equal( json.edits[0].diffs[0].operation, 'UNCHANGED', 'Since we made the change now change is required.' );
    //                 equal( json.edits[0].diffs[0].text, 'Do or do not, there is no try', 'The first part of the string should be unchanged.' );
    //                 equal( json.edits[0].diffs[1].operation, 'DELETE', 'The operation should be DELETE' );
    //                 equal( json.edits[0].diffs[1].text, '.', "text should be '.'" );
    //                 equal( json.edits[0].diffs[2].operation, 'ADD', 'The operation should be ADD' );
    //                 equal( json.edits[0].diffs[2].text, '!', "text should be '!'" );
    //                 start();
    //                 break;
    //         }
    //         counter2++
    //     };

    //     ws.onerror = function( e ) {
    //         ok( false, 'WS client1 failed to connect to WebSocket server [' + url + ']' );
    //         start();
    //     };

    //     ws2.onerror = function( e ) {
    //         ok( false, 'WS client2 failed to connect to WebSocket server [' + url + ']' );
    //     };
    // });

    test( 'AeroGear.DiffSyncClient should support creation without the new keyword', function() {
        var client = AeroGear.DiffSyncClient( { serverUrl: 'ws://localhost:7777/sync' } );
        ok( client , 'Should be no problem not using new when creating' );
    });

    test( 'serverUrl is mandatory', function() {
        throws( function() { AeroGear.DiffSyncClient(); } , Error, "'serverUrl' must be specified" );
    });

    test( 'member access', function() {
        var client = AeroGear.DiffSyncClient( { serverUrl: 'ws://localhost:7777/sync' } );
        equal( client.serverUrl, undefined, 'Should not be able to access private members serverUrl' );
        equal( client.sendQueue, undefined, 'Should not be able to access private members sendQueue' );
        equal( client.ws, undefined, 'Should not be able to access private members ws' );
    });

    // asyncTest('sendDoc to Sync Server', function() {
    //     var onmessage = function( e ) {
    //         var json = JSON.parse( e.data );
    //         equal( json.msgType, 'patch', 'A patch should return a patch message type' );
    //         equal( json.edits[0].diffs[0].operation, 'UNCHANGED', 'The client that sent the patch msg should also recieve a patch back.' );
    //         client.disconnect();
    //         start();
    //     };
    //     var client = AeroGear.DiffSyncClient( {serverUrl: 'ws://localhost:7777/sync', onmessage: onmessage } );
    //     var documentId = uuid();
    //     var doc = { id: documentId, clientId: 'js-client-test', content: 'Do or do not, there is no try.' };
    //     client.addDocument( doc );
    //     ok( client , 'Should be no problem not using new when creating' );
    // });

    function uuid()
    {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function( c ) {
            var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);
            return v.toString( 16 );
        });
    }

})();
